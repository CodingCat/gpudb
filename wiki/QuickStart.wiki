#summary One-sentence summary of this page.
<wiki:toc max_depth="3" />

=GPUDB Start Guide=
==System Requirement==

 * A linux system with GCC (both 32-bit and 64 bit GCC are needed for 64-bit environments) and Python installed.
 * Java 1.6 
 * CUDA toolkit (4.0 or later)

==Source Code==
You can check out the source codes [http://code.google.com/p/gpudb/source/checkout here].

==Install Translator==
After you check out the source code, enter the source directory and execute:

   * python setup.py install

The install process only add files inside the source code directory.

If you encounter any errors during this step, make sure you have
gcc and python installed. You can also report your errors [http://code.google.com/p/ysmart/issues/entry Report]. 

==Data Generation==

===SSBM Data Generation===
The dbgen to generate original SSBM data is located
in test/dbgen directory. You need to generate the plain
text data.

 * Enter test/dbgen directory, and execute "Make"
 * ./dbgen -vfF -t a -s 1 to generate data with scale factor 1

===Load SSBM Data===
The original SSBM data cannot be directly used by our engine.
The data need to be transformed into column-stored data. 

 * Copy the data generated in the previous step to result/GPUCODE directory

 * Enter result/GPUCODE directory and execute "Make loader", which will generate "gpuDBLoader" to transform the data.

 * ./gpuDBLoader -l lineorder.tbl -d date.tbl -c customer.tbl -s supplier.tbl -p part.tbl

The data of a table is stored as a collection of independent files, each of which represents an attribute from the table. The file name is composed as the table name (in upper case) + the index of the attribute in the table. For example, the first attribute from table lineorder will be stored in file LINEORDER0. 

Make the table name specified in load.c matches the table name in the schema.
Currently you need to edit load.c if you want to change the table name.

===Data Compression===

Data can be compressed to get a better query performance. You can skip
to the next section if you don't need to compress the data.

====Run Length Encoding====

 * Sort. To get a better compression ratio, the column that is compressed using RLE scheme should be sorted first. To sort the column, users can either use the "sort" command to sort the plain text SSBM data on particular columns before transforming the data into column-stored formant, or they can enter result/GPUCODE directory and execute "make sort" to generate a file named "columnSort" that will sort a table on a particular integer column.

    Usage: ./columnSort inputPrefix outputPrefix index. inputPrefix is the name of the table to be sorted, outputPrefix is the name of the generated sorted table and index specifies the sorted column.

 * Compression. Enter result/GPUCODE and execute "make rle" to generate the file "rleCompression" to compress the column using RLE scheme.

    Usage: ./rleCompression inputColumn outputColumn. inputColumn specifies the name of the sorted column to be compressed using RLE, and outputColumn is the name of the generated compressed column.

====Dictionary Encoding====

    Enter result/GPUCODE and execute "make dict" to generate the file "dictCompression" to
compress the column using dictionary encoding scheme.

    Usage: ./dictCompression inputColumn outputColumn. inputColumn specifies the name of the column to be compressed using dictionary encoding scheme, and outputColumn is the name of the generated compressed column.

==Code Generation==

Usage: *./translate.py query-file.sql schema-file.schema* 
 * query-file.sql should contain the SQL query you want to translate. Currently the suppported SQL queries are listed in test/ssb_test directory
 * schema-file.schema is the schema file that describes the data

After executing the aforementioned command, enter result/GPUCode directory and execute "Make gpudb", which will generate an executable file
named "GPUDATABASE". Executing "GPUDATABASE" will run the query on GPU.
To correctly execute the file, make sure all the column-stored data
are in the result/GPUCode directory